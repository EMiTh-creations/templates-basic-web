// https://css-tricks.com/snippets/sass/mixin-manage-breakpoints/
// https://github.com/sebastianmusial/SSCSS/blob/master/src/mixins/_mixins.scss

$breakpoints: (
    "small": 640px,
    "medium": 768px,
    "large": 1024px,
    "x-large": 1280px,
    "xx-large": 1400px,
) !default;

// Example usage:
//
// @include respond-to("medium")
// @include respond-to("medium", "max")
// @include respond-to("medium", "large")
//

/// Mixin to manage responsive breakpoints
/// @author emilyjt
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint, $arg: false) {
    // The first check, is to see if the breakpoint exists
    @if map-has-key($breakpoints, $breakpoint) {
        // If an argument is provided, and it is not "min"
        @if $arg and ($arg != min) {
            // check if the provided argument is "max", and if it is we set up a max screen media query
            @if $arg == max {
                $width: map_get($breakpoints, $breakpoint);
                $width: $width - 1px;

                @media screen and (max-width: $width) {
                    @content;
                }
                // check if the provided argument is a breakpoint
            } @else if map-has-key($breakpoints, $arg) {
                $width: map_get($breakpoints, $breakpoint);

                $width-max: map_get($breakpoints, $arg);
                $width-max: $width-max - 1px;

                @media screen and (min-width: $width) and (max-width: $width-max) {
                    @content;
                }
            } @else {
                @warn "`#{$arg}` is not a valid parameter.";
            }
        } @else {
            $width: map_get($breakpoints, $breakpoint);

            @media screen and (min-width: $width) {
                @content;
            }
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. " + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}
